swagger: "2.0"
info:
  description: "This is a sample API.  You can find out more about Swagger at <a href=\"http://swagger.io\">http://swagger.io</a> or on irc.freenode.net, #swagger.  For this sample, you can use the api key \"special-key\" to test the authorization filters"
  version: 1.0.0
  title: Swagger YAML
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "ankitasharma1410@gmail.com"
  license:
    name: Apache 2.0
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
basePath: /
tags:
  - name: alive
    description: health check of API
  - name: create game
    description: Created pokemon game and returns id and HTTP status code = 201
  - name: make a move
    description: Outputs json on game after the move from players
schemes:
  - http
paths:
  /healthcheck/alive:
    get:
      summary: Checks health of API
      description: ""
      operationId: alive
      produces:
        - text
      responses:
        "200":
          description: alive
  /games:
    post:
      summary: Creates game in memory
      description: no input parameter needed
      operationId: createGamea
      produces:
        - application/json
      responses:
        "201":
          description: successful operation
          schema:
            type: object
            items:
              $ref: "#/definitions/ApiResponse"
  "/games/{gameId}/pits/{pitId}":
    put:
      summary: make further steps in game
      description: Returns json of existing game response
      operationId: step
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: gameId
          in: path
          description: ID of game
          required: true
          type: integer
          format: int64
        - name: pitId
          in: path
          description: ID of pit
          required: true
          type: integer
          format: int64
responses:
        "200":
          description: successful operation
          schema:
            $ref: "#/definitions/ApiResponse"
        "400":
          description: Invalid ID
        "404":
          description: Resource not found
definitions:
    Error:
        type: object
        description: 'Error model'
        required:
            - code
            - message
            - severity
        properties:
            code: {type: string, description: 'One of a server-defined set of error codes'}
            message: {type: string, description: 'A human-readable representation of the error'}
            severity: {$ref: '#/definitions/ErrorSeverity'}
            source: {type: string, description: 'Source of the error'}
            target: {type: string, description: 'The target of the error'}
            innerErrors: {type: array, description: 'An array of errors that may have led to this reported error', items: {$ref: '#/definitions/InnerError'}}
    InnerError:
      type: object
      description: 'Inner Error model'
      required:
          - code
          - message
          - severity
      properties:
          code: {type: string}
          message: {type: string}
          severity: {$ref: '#/definitions/ErrorSeverity'}
          source: {type: string}
    ErrorSeverity:
      type: string
      enum:
          - critical
          - error
          - warning
          - info